$(function () {
	sliderInit()
	replaceHash()
	lenisSetup()
	AOS.init({
		duration: 1500,
		disable: "mobile",
	});
	gsap.to(".rotating-circle", {
		rotation: 360,
		duration: 10,
		repeat: -1,
		ease: "linear",
		transformOrigin: "50% 50%"
	});
})

function preLoader() {
	const tl = gsap.timeline({
		duration: 0.1
	});
	tl.to('.preLoader.black > img', {
			delay: 1,
			y: 50,
			autoAlpha: 0
		})
		.to('.preLoader.black', {
			yPercent: -100
		})
		.to('.preLoader.white', {
			yPercent: -100
		})
		.to('.preLoader', {
			css: {
				display: 'none'
			}
		})
		.from('.navbar-brand > img', {
			x: -50,
			autoAlpha: 0
		})
		.from(
			'.navbar-nav > li, .form-inline a', {
				autoAlpha: 0,
				x: 100,
				stagger: 0.05
			},
			'>-0.5'
		)
		.from('.slideOne', {
			autoAlpha: 0,
			yPercent: 100,
			stagger: 0.05
		})
		.from(
			'.bg-image', {
				autoAlpha: 0
			},
			'<-0.25'
		);
}

function lenisSetup() {
	const lenis = new Lenis({
		duration: 1.5,
		easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),
		smooth: true,
		mouseMultiplier: 1,
	});

	function raf(time) {
		lenis.raf(time);
		requestAnimationFrame(raf);
	}
	requestAnimationFrame(raf);
	document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
		anchor.addEventListener("click", function (e) {
			e.preventDefault();
			lenis.scrollTo(this.getAttribute("href"));
		});
	});
	lenis.scrollTo("top");
}

function replaceHash() {
	document.querySelectorAll("a").forEach((a) => {
		let href = a.getAttribute("href");
		a.href = href ?
			href.startsWith("#") && href.endsWith("#") ?
			href.replace("#", "javascript:void(0)") :
			href :
			"javascript:void(0)";
	});
}

function sliderInit() {
	var customer_slider = new Swiper('.customer_slider', {
		loop: true,
		autoplay: true,
		slidesPerView: 1,
		spaceBetween: 10,
		centeredSlides: true,
		roundLengths: true,
		breakpoints: {
			1199: {
				slidesPerView: 2.25,
				spaceBetween: 30
			},
			768: {
				slidesPerView: 2,
				spaceBetween: 28
			},
			576: {
				slidesPerView: 1.75,
				spaceBetween: 22
			},
			375: {
				slidesPerView: 1.5,
				spaceBetween: 18
			}
		},
		scrollbar: {
			el: ".swiper-scrollbar",
		},
		navigation: {
			nextEl: ".swiper-button-next",
			prevEl: ".swiper-button-prev",
		},
		pagination: {
			el: ".swiper-pagination",
			clickable: true,
		},
	});

	var industrySlider = new Swiper('.industrySlider', {
		loop: true,
		slidesPerView: 4,
		spaceBetween: 20,
		breakpoints: {
			1024: {
				slidesPerView: 4,
				spaceBetween: 20
			},
			768: {
				slidesPerView: 1,
				spaceBetween: 20
			},
			640: {
				slidesPerView: 1,
				spaceBetween: 10
			},
			576: {
				slidesPerView: 1,
				spaceBetween: 10
			},
			375: {
				slidesPerView: 1,
				spaceBetween: 10
			}
		},
		navigation: {
			nextEl: '.swiper-button-next',
			prevEl: '.swiper-button-prev'
		},
		scrollbar: {
			el: '.swiper-scrollbar'
		}
	});
}

function imgRevealer() {
	let revealContainers = document.querySelectorAll('.reveal');
	revealContainers.forEach((container) => {
		let image = container.querySelector('img');
		let revelerTl = gsap.timeline({
			scrollTrigger: {
				trigger: container,
				toggleActions: 'restart none none reverse'
			}
		});
		revelerTl.set(container, {
			autoAlpha: 1
		});
		revelerTl.from(container, 0.75, {
			xPercent: -100,
			ease: Power2.out
		});
		revelerTl.from(image, 0.75, {
			xPercent: 100,
			scale: 1.3,
			delay: -0.75,
			ease: Power2.out
		});
	});
}
// Split text into spans
let typeSplit = new SplitType("[text-split]", {
	types: "words, chars",
	tagName: "span"
});

// Link timelines to scroll position
function createScrollTrigger(triggerElement, timeline) {
	// Reset tl when scroll out of view past bottom of screen
	ScrollTrigger.create({
		trigger: triggerElement,
		start: "top bottom",

		onLeaveBack: () => {
			timeline.progress(0);
			timeline.pause();
		}
	});
	// Play tl when scrolled into view (60% from top of screen)
	ScrollTrigger.create({
		trigger: triggerElement,
		start: "top 60%",
		onEnter: () => timeline.play()
	});
}

$("[scrub-each-word]").each(function (index) {
	let tl = gsap.timeline({
		scrollTrigger: {
			trigger: $(this),
			start: "top 20%",
			end: "top center",
			scrub: true,
			markers: true,
		}
	});
	tl.from($(this).find(".word"), {
		opacity: 0.2,
		duration: 0.2,
		ease: "power1.out",
		stagger: {
			each: 0.4
		}
	});
});

// Avoid flash of unstyled content
gsap.set("[text-split]", {
	opacity: 1
});


const canvas = document.querySelector("canvas");
const context = canvas.getContext("2d");

const frames = {
	currentIndex: 0,
	maxIndex: 500
};

const images = [];
let imagesLoaded = 0;

function preloadImages() {
	for (let i = 1; i <= frames.maxIndex; i++) {
		const imageUrl = `images/new-frame/frame_${i.toString().padStart(4, "0")}.jpeg`;
		const img = new Image();
		img.src = imageUrl;

		img.onload = function () {
			imagesLoaded++;

			// Show first image as soon as it's available
			if (imagesLoaded === 1) {
				loadImage(0);
			}

			// When all images are loaded
			if (imagesLoaded === frames.maxIndex) {
				loadImage(0);
				startAnimation();
			}
		};

		images.push(img);
	}
}

function loadImage(index) {
	if (index >= 0 && index <= frames.maxIndex) {
		const img = images[index];

		if (!img || !img.complete) {
			setTimeout(() => loadImage(index), 100);
			return;
		}

		canvas.width = window.innerWidth;
		canvas.height = window.innerHeight;

		const scaleX = canvas.width / img.width;
		const scaleY = canvas.height / img.height;
		const scale = Math.max(scaleX, scaleY);

		const newWidth = img.width * scale;
		const newHeight = img.height * scale;

		const offsetX = (canvas.width - newWidth) / 2;
		const offsetY = (canvas.height - newHeight) / 2;

		context.clearRect(0, 0, canvas.width, canvas.height);
		context.imageSmoothingEnabled = true;
		context.imageSmoothingQuality = "high";
		context.drawImage(img, offsetX, offsetY, newWidth, newHeight);

		frames.currentIndex = index;
	}
}

function startAnimation() {
	gsap.timeline({
		scrollTrigger: {
			trigger: ".main_banner",
			start: "top top",
			end: "bottom center",
			scrub: 1,
			pin: true,

			// Show start frame when scroll goes above
			onLeaveBack: () => loadImage(0),

			// Show end frame when scroll goes past
			onLeave: () => loadImage(frames.maxIndex),

			onUpdate: (self) => {
				const index = Math.floor(self.progress * frames.maxIndex);
				loadImage(index);
			}
		}
	});
}

window.addEventListener("resize", () => {
	loadImage(frames.currentIndex);
});

preloadImages();